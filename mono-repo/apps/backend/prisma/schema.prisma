generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum JobCardStatusEnum {
  open
  close
}

enum CleaningSlotStatusEnum {
  free
  booked
  in_progress
}

enum OperationalStatusEnum {
  In_Service
  Standby
  Under_Maintenance
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Train {
  id        Int       @id @default(autoincrement())
  trainname String    @unique
  trainID   String    @unique
  current_date DateTime  @default(now())
  createdAt DateTime  @default(now())
  updatedAt DateTime?  @updatedAt

  fitness        FitnessCertificates?
  jobCardStatus  JobCardStatus?
  branding       Branding?
  mileage        Mileage?
  cleaning       Cleaning?
  stabling       Stabling?
  operations     Operations?
}

model FitnessCertificates {
  id                        Int       @id @default(autoincrement())
  rollingStockFitnessStatus  Boolean
  rollingStockFitnessExpiryDate DateTime
  signallingFitnessStatus    Boolean
  signallingFitnessExpiryDate DateTime
  telecomFitnessStatus       Boolean
  telecomFitnessExpiryDate   DateTime

  train     Train   @relation(fields: [trainId], references: [trainID])
  trainId   String     @unique
}

model JobCardStatus {
  id             Int             @id @default(autoincrement())
  jobCardStatus  JobCardStatusEnum
  openJobCards   Int
  closedJobCards Int
  lastJobCardUpdate DateTime

  train     Train   @relation(fields: [trainId], references: [trainID])
  trainId   String     @unique
}

model Branding {
  id                    Int       @id @default(autoincrement())
  brandingActive        Boolean
  brandCampaignID       String?
  exposureHoursAccrued  Int
  exposureHoursTarget   Int
  exposureDailyQuota    Int

  train     Train   @relation(fields: [trainId], references: [trainID])
  trainId   String     @unique
}

model Mileage {
  id                       Int       @id @default(autoincrement())
  totalMileageKM           Int
  mileageSinceLastServiceKM Int
  mileageBalanceVariance    Int
  brakepadWearPercent       Int
  hvacWearPercent           Int

  train     Train   @relation(fields: [trainId], references: [trainID])
  trainId   String     @unique
}

model Cleaning {
  id                   Int                 @id @default(autoincrement())
  cleaningRequired     Boolean
  cleaningSlotStatus   CleaningSlotStatusEnum
  bayOccupancyIDC      String?
  cleaningCrewAssigned Int?
  lastCleanedDate      DateTime

  train     Train   @relation(fields: [trainId], references: [trainID])
  trainId   String     @unique
}

model Stabling {
  id                    Int       @id @default(autoincrement())
  bayPositionID         Int
  shuntingMovesRequired Int
  stablingSequenceOrder Int

  train     Train   @relation(fields: [trainId], references: [trainID])
  trainId   String     @unique
}

model Operations {
  id                Int                @id @default(autoincrement())
  operationalStatus OperationalStatusEnum
  reasonForStatus   String?
  rank              Int?
  score             Int?
  rl_priority       Int?
  train     Train   @relation(fields: [trainId], references: [trainID])
  trainId   String     @unique
}
